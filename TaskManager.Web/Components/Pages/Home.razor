@page "/"
@using TaskManager.Web.Models.Tasks
@using TaskManager.Web.Services.TaskService
@inject ITaskService TaskService
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>

<div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1100;">
    <div class="toast text-white bg-success border-0 shadow" id="toastMessage" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">@toastMessage</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto"
                    data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

<div class="d-flex justify-content-center align-items-center min-vh-100 bg-light">
    <div class="card shadow w-75">
        <div class="d-flex justify-content-between align-items-center mx-5 my-4">
            <h4 class="mb-0">Tasks</h4>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#formModal">Add a Task</button>
        </div>
        <div class="btn-group" role="group" aria-label="Filtro de tareas">
            <button type="button" class="btn btn-outline-secondary" @onclick="() => FilterTable(1)">Filter Completed</button>
            <button type="button" class="btn btn-outline-secondary" @onclick="() => FilterTable(2)">Filter Incomplete</button>
            <button type="button" class="btn btn-outline-secondary" @onclick="() => FilterTable(0)">Filter All</button>
        </div>
        <div class="d-flex justify-content-center">
            
            @if (tasks is not null)
            {
                <div class="container my-5">                    
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Title</th>
                                <th>Description</th>
                                <th>Status</th>
                                <th>Deleate</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var t in tasks)
                            {
                                <tr>
                                    <td>@t.Id</td>
                                    <td>@t.Title</td>
                                    <td>@t.Description</td>
                                    <td>
                                        <button class="btn btn-sm @(t.Status == 1 ? "btn-success" : "btn-outline-secondary")"
                                                title="Cambiar estado"
                                                @onclick="() => ToggleCompletedAsync(t)">
                                            @(t.Status == 1 ? "✓" : "—")
                                        </button>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-danger"
                                                title="Eliminar"
                                                @onclick="() => PromptDeleteAsync(t.Id)">
                                            🗑️ Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<div class="modal fade" id="formModal" tabindex="-1" aria-labelledby="formModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="formModalLabel">Formulario de contacto</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <EditForm Model="@formModel" OnValidSubmit="HandleValidSubmit">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Título</label>
                        <InputText class="form-control" @bind-Value="formModel.Title" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Descripción</label>
                        <InputText class="form-control" @bind-Value="formModel.Description" required />
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <InputCheckbox class="form-check-input"
                                           @bind-Value="isMarked" />
                            <label class="form-check-label">Mark as Complete</label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<div class="modal fade" id="confirmDeleteModal" tabindex="-1"
     aria-labelledby="confirmDeleteLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmDeleteLabel">Confirm deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"
                        aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this task? This action cannot be undone.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary"
                        data-bs-dismiss="modal">
                    Cancel
                </button>
                <button type="button" class="btn btn-danger"
                        @onclick="ConfirmDeleteAsync">
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>


@code {
    private TaskModel formModel = new();
    private bool isMarked = false;
    private List<TaskModel> tasks;
    private int? taskIdPendingDelete = 0;
    private IJSObjectReference? modalJs;
    private int filter = 0;
    private string toastMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        tasks = await TaskService.GetAll();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            modalJs = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/modalHelper.js");
        }
    }

    private async Task HandleValidSubmit()
    {
        var dto = new TaskModel()
        {
            Title = formModel.Title,
            Description = formModel.Description,
            Status = isMarked ? 1 : 0
        };
        await TaskService.Create(dto);
        await ShowToast($"The task has been created.", "success");
        await CargarTareasAsync();
        isMarked = false;
        formModel = new();
    }

    private async Task ShowToast(string message, string type = "success")
    {
        toastMessage = message;

        // Cambia el color según el tipo
        var backgroundClass = type switch
        {
            "success" => "bg-success",
            "error" => "bg-danger",
            "info" => "bg-info",
            _ => "bg-secondary"
        };

        // Cambia clase desde JS
        await JSRuntime.InvokeVoidAsync("eval", $@"
        const toast = document.getElementById('toastMessage');
        toast.className = 'toast text-white {backgroundClass} border-0 shadow';
        new bootstrap.Toast(toast).show();
    ");
    }

    private async Task CargarTareasAsync()
    {
        if (filter == 0)
        {
            tasks = await TaskService.GetAll();
        }
        else if (filter == 1)
        {
            tasks = await TaskService.GetFilter(1);
        }
        else
        {
            tasks = await TaskService.GetFilter(0);
        }
        StateHasChanged();
    }

    private async Task FilterTable(int fil)
    {
        filter = fil;
        CargarTareasAsync();
        await ShowToast($"{tasks.Count} task were obtained.", "info");
    }

    private async Task ToggleCompletedAsync(TaskModel task)
    {
        await TaskService.ChangeStatus(task.Status == 1 ? 0 : 1, task.Id);
        await CargarTareasAsync();
        await ShowToast($"The task status has been updated.", "success");
        StateHasChanged();
    }

    private async Task DeleteTaskAsync(int id)
    {
        await TaskService.Delete(id);
        await CargarTareasAsync();
        StateHasChanged();
    }

    private async Task PromptDeleteAsync(int id)
    {
        taskIdPendingDelete = id;
        await modalJs.InvokeVoidAsync("show", "#confirmDeleteModal");
    }

    private async Task ConfirmDeleteAsync()
    {
        if (taskIdPendingDelete is null) return;

        await TaskService.Delete((int)taskIdPendingDelete);
        await ShowToast($"The task was deleted.", "success");
        await CargarTareasAsync();

        await modalJs.InvokeVoidAsync("hide", "#confirmDeleteModal");

        taskIdPendingDelete = null;
        StateHasChanged();
    }
}